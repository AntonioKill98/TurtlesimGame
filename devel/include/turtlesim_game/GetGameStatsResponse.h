// Generated by gencpp from file turtlesim_game/GetGameStatsResponse.msg
// DO NOT EDIT!


#ifndef TURTLESIM_GAME_MESSAGE_GETGAMESTATSRESPONSE_H
#define TURTLESIM_GAME_MESSAGE_GETGAMESTATSRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace turtlesim_game
{
template <class ContainerAllocator>
struct GetGameStatsResponse_
{
  typedef GetGameStatsResponse_<ContainerAllocator> Type;

  GetGameStatsResponse_()
    : catches(0)
    , average_time(0.0)
    , game_status()  {
    }
  GetGameStatsResponse_(const ContainerAllocator& _alloc)
    : catches(0)
    , average_time(0.0)
    , game_status(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _catches_type;
  _catches_type catches;

   typedef float _average_time_type;
  _average_time_type average_time;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _game_status_type;
  _game_status_type game_status;





  typedef boost::shared_ptr< ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetGameStatsResponse_

typedef ::turtlesim_game::GetGameStatsResponse_<std::allocator<void> > GetGameStatsResponse;

typedef boost::shared_ptr< ::turtlesim_game::GetGameStatsResponse > GetGameStatsResponsePtr;
typedef boost::shared_ptr< ::turtlesim_game::GetGameStatsResponse const> GetGameStatsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator1> & lhs, const ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.catches == rhs.catches &&
    lhs.average_time == rhs.average_time &&
    lhs.game_status == rhs.game_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator1> & lhs, const ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace turtlesim_game

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c5d5a8df822594016cbcf60c0ddc011";
  }

  static const char* value(const ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c5d5a8df8225940ULL;
  static const uint64_t static_value2 = 0x16cbcf60c0ddc011ULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlesim_game/GetGameStatsResponse";
  }

  static const char* value(const ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 catches\n"
"float32 average_time\n"
"string game_status\n"
"\n"
;
  }

  static const char* value(const ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.catches);
      stream.next(m.average_time);
      stream.next(m.game_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetGameStatsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtlesim_game::GetGameStatsResponse_<ContainerAllocator>& v)
  {
    s << indent << "catches: ";
    Printer<int32_t>::stream(s, indent + "  ", v.catches);
    s << indent << "average_time: ";
    Printer<float>::stream(s, indent + "  ", v.average_time);
    s << indent << "game_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.game_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLESIM_GAME_MESSAGE_GETGAMESTATSRESPONSE_H
