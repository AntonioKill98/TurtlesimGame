// Generated by gencpp from file turtlesim_game/GameStats.msg
// DO NOT EDIT!


#ifndef TURTLESIM_GAME_MESSAGE_GAMESTATS_H
#define TURTLESIM_GAME_MESSAGE_GAMESTATS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace turtlesim_game
{
template <class ContainerAllocator>
struct GameStats_
{
  typedef GameStats_<ContainerAllocator> Type;

  GameStats_()
    : time_to_catch(0.0)
    , game_status()  {
    }
  GameStats_(const ContainerAllocator& _alloc)
    : time_to_catch(0.0)
    , game_status(_alloc)  {
  (void)_alloc;
    }



   typedef float _time_to_catch_type;
  _time_to_catch_type time_to_catch;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _game_status_type;
  _game_status_type game_status;





  typedef boost::shared_ptr< ::turtlesim_game::GameStats_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlesim_game::GameStats_<ContainerAllocator> const> ConstPtr;

}; // struct GameStats_

typedef ::turtlesim_game::GameStats_<std::allocator<void> > GameStats;

typedef boost::shared_ptr< ::turtlesim_game::GameStats > GameStatsPtr;
typedef boost::shared_ptr< ::turtlesim_game::GameStats const> GameStatsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::turtlesim_game::GameStats_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::turtlesim_game::GameStats_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::turtlesim_game::GameStats_<ContainerAllocator1> & lhs, const ::turtlesim_game::GameStats_<ContainerAllocator2> & rhs)
{
  return lhs.time_to_catch == rhs.time_to_catch &&
    lhs.game_status == rhs.game_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::turtlesim_game::GameStats_<ContainerAllocator1> & lhs, const ::turtlesim_game::GameStats_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace turtlesim_game

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::turtlesim_game::GameStats_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::turtlesim_game::GameStats_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlesim_game::GameStats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::turtlesim_game::GameStats_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlesim_game::GameStats_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::turtlesim_game::GameStats_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::turtlesim_game::GameStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "26961f3470581d1619e4ee331e4dca0d";
  }

  static const char* value(const ::turtlesim_game::GameStats_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x26961f3470581d16ULL;
  static const uint64_t static_value2 = 0x19e4ee331e4dca0dULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlesim_game::GameStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "turtlesim_game/GameStats";
  }

  static const char* value(const ::turtlesim_game::GameStats_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::turtlesim_game::GameStats_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 time_to_catch\n"
"string game_status\n"
;
  }

  static const char* value(const ::turtlesim_game::GameStats_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::turtlesim_game::GameStats_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_to_catch);
      stream.next(m.game_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GameStats_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlesim_game::GameStats_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::turtlesim_game::GameStats_<ContainerAllocator>& v)
  {
    s << indent << "time_to_catch: ";
    Printer<float>::stream(s, indent + "  ", v.time_to_catch);
    s << indent << "game_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.game_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TURTLESIM_GAME_MESSAGE_GAMESTATS_H
